import streamlit as st
import pandas as pd
import re
import io
from typing import List, Dict, Tuple
import docx

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–û–í
# =============================================================================

def read_uploaded_file(file):
    """
    –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    """
    try:
        file.seek(0)
        
        if file.name.endswith('.docx'):
            doc = docx.Document(file)
            full_text = []
            
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    full_text.append(paragraph.text)
            
            for table in doc.tables:
                for row in table.rows:
                    row_text = []
                    for cell in row.cells:
                        if cell.text.strip():
                            row_text.append(cell.text)
                    if row_text:
                        full_text.append(" | ".join(row_text))
            
            return "\n".join(full_text)
        else:
            return file.getvalue().decode("utf-8")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.name}: {str(e)}")
        return None

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•
# =============================================================================

def parse_correct_order(file_content: str) -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤—ã—Ä–µ–∑–∫–∞–º–∏
    """
    if not file_content:
        return []
        
    lines = file_content.split('\n')
    correct_samples = []
    
    for line in lines:
        line = line.strip()
        
        if re.match(r'^[-]+$', line) or not line:
            continue
            
        clean_line = re.sub(r'\[(.*?)\]\{\.mark\}', r'\1', line)
        
        match = re.match(r'^\s*(\d+)\s+(.+)$', clean_line)
        if match:
            sample_number = int(match.group(1))
            sample_name = match.group(2).strip()
            
            correct_samples.append({
                'order': sample_number,
                'correct_name': sample_name,
                'key': create_sample_key(sample_name)
            })
    
    return correct_samples

def create_sample_key(sample_name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    normalized = re.sub(r'\s+', ' ', sample_name.strip()).lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π (–∏–∑ —Ñ–∞–π–ª–∞ –ø–æ—Ä—è–¥–∫–∞)
    patterns_correct = [
        r'([–∞-—è]+)\s*([–∞-—è]+)?\s*\((\d+[-\d]*),\s*([–∞-—è])\)',  # –ö–ü–ü –í–î(50,–ê)
        r'([–∞-—è]+)\s*([–∞-—è]+)?-?(\d+)?\s*\((\d+),\s*([–∞-—è])\)', # –ö–ü–ü –ù–î-1(19,–ê)
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    patterns_analysis = [
        r'([–∞-—è]+)\s*([–∞-—è]+)?\s*(\d+)',  # –ù–ì –®–ü–ü 4
        r'(\d+)[,_]\s*([–∞-—è]+)',  # 28_–ö–ü–ü –í–î
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    for pattern in patterns_correct:
        match = re.search(pattern, normalized)
        if match:
            parts = [p for p in match.groups() if p]
            return '_'.join(parts)
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞
    for pattern in patterns_analysis:
        match = re.search(pattern, normalized)
        if match:
            parts = [p for p in match.groups() if p]
            return '_'.join(parts)
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    numbers = re.findall(r'\d+', normalized)
    if numbers:
        return f"sample_{numbers[-1]}"
    
    return normalized

def parse_chemical_tables(file_content: str) -> Dict[str, List[Dict]]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
    """
    if not file_content:
        return {}
        
    lines = file_content.split('\n')
    tables = {}
    current_steel_grade = None
    current_table = []
    
    for line in lines:
        line = line.strip()
        
        # –ò—â–µ–º –º–∞—Ä–∫—É —Å—Ç–∞–ª–∏
        steel_match = re.search(r'–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏:\s*([^\n]+)', line, re.IGNORECASE)
        if steel_match:
            if current_steel_grade and current_table:
                tables[current_steel_grade] = current_table
                current_table = []
            current_steel_grade = steel_match.group(1).strip()
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
        if any(x in line for x in ['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¢–£', '14-3–†-55-2001', '---', '###']):
            continue
        
        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏
        if current_steel_grade and re.search(r'[–∫–ö][–ø–ü][–ø–ü]|[—à–®][–ø–ü][–ø–ü]|[—ç–≠][–ø–ü][–∫–ö]', line):
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞
            if re.match(r'^\s*\d+\s+[^\d]', line) and re.search(r'\d', line):
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–±–µ–ª–∞–º
                parts = re.split(r'\s{2,}', line)
                if len(parts) >= 2:
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
                    sample_name = parts[1]
                    measurements = parts[2:] if len(parts) > 2 else []
                    
                    sample_data = {
                        'original_name': sample_name,
                        'measurements': measurements,
                        'key': create_sample_key(sample_name)
                    }
                    current_table.append(sample_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞–±–ª–∏—Ü—É
    if current_steel_grade and current_table:
        tables[current_steel_grade] = current_table
    
    return tables

def create_comparison_table(correct_samples: List[Dict], chemical_tables: Dict[str, List[Dict]]) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –æ–±—Ä–∞–∑—Ü–æ–≤
    """
    data = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—Ü—ã –∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    all_analysis_samples = []
    for steel_grade, samples in chemical_tables.items():
        for sample in samples:
            all_analysis_samples.append({
                'name': sample['original_name'],
                'key': sample['key'],
                'steel_grade': steel_grade
            })
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
    for correct in correct_samples:
        data.append({
            '–¢–∏–ø': '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫',
            '‚Ññ –ø/–ø': correct['order'],
            '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞': correct['correct_name'],
            '–ö–ª—é—á': correct['key'],
            '–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏': '-'
        })
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    for i, analysis in enumerate(all_analysis_samples):
        data.append({
            '–¢–∏–ø': '–•–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
            '‚Ññ –ø/–ø': i + 1,
            '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞': analysis['name'],
            '–ö–ª—é—á': analysis['key'],
            '–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏': analysis['steel_grade']
        })
    
    return pd.DataFrame(data)

def match_and_sort_samples(original_samples: List[Dict], correct_samples: List[Dict]) -> List[Dict]:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    """
    key_to_correct = {}
    for correct in correct_samples:
        key_to_correct[correct['key']] = {
            'correct_name': correct['correct_name'],
            'order': correct['order']
        }
    
    matched_samples = []
    for original in original_samples:
        if original['key'] in key_to_correct:
            matched_samples.append({
                'correct_name': key_to_correct[original['key']]['correct_name'],
                'measurements': original['measurements'],
                'order': key_to_correct[original['key']]['order'],
                'original_name': original['original_name'],
                'key': original['key']
            })
    
    matched_samples.sort(key=lambda x: x['order'])
    return matched_samples

# =============================================================================
# STREAMLIT –ò–ù–¢–ï–†–§–ï–ô–°
# =============================================================================

st.set_page_config(
    page_title="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
    page_icon="üî¨",
    layout="wide"
)

st.markdown("""
<style>
    .main-header { 
        font-size: 2.5rem; 
        color: #1f77b4; 
        text-align: center; 
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .comparison-table {
        margin: 20px 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.markdown('<div class="main-header">üî¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</div>', unsafe_allow_html=True)
    
    with st.expander("üìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø", expanded=False):
        st.markdown("""
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤
        2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞  
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
        5. –°–∫–∞—á–∞–π—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

        **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ë—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–∏–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –§–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º")
        correct_order_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤",
            type=['txt', 'docx'],
            key="correct_order"
        )
        
        if correct_order_file:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {correct_order_file.name}")
    
    with col2:
        st.subheader("üß™ –§–∞–π–ª —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
        chemical_analysis_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º", 
            type=['txt', 'docx'],
            key="chemical_analysis"
        )
        
        if chemical_analysis_file:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {chemical_analysis_file.name}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.button("üöÄ –û–ë–†–ê–ë–û–¢–ê–¢–¨ –î–ê–ù–ù–´–ï", type="primary", use_container_width=True):
        if not correct_order_file or not chemical_analysis_file:
            st.error("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞")
            return
        
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            with st.spinner("üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª—ã..."):
                correct_order_content = read_uploaded_file(correct_order_file)
                chemical_analysis_content = read_uploaded_file(chemical_analysis_file)
            
            if not correct_order_content or not chemical_analysis_content:
                st.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):
                correct_samples = parse_correct_order(correct_order_content)
                chemical_tables = parse_chemical_tables(chemical_analysis_content)
            
            if not correct_samples:
                st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–∑—Ü—ã –≤ —Ñ–∞–π–ª–µ –ø–æ—Ä—è–¥–∫–∞")
                return
                
            if not chemical_tables:
                st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–ê–ë–õ–ò–¶–£ –°–†–ê–í–ù–ï–ù–ò–Ø
            st.subheader("üîç –¢–ê–ë–õ–ò–¶–ê –°–†–ê–í–ù–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô")
            
            comparison_df = create_comparison_table(correct_samples, chemical_tables)
            st.dataframe(comparison_df, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_correct = len(correct_samples)
            total_analysis = sum(len(samples) for samples in chemical_tables.values())
            
            st.subheader("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("–û–±—Ä–∞–∑—Ü–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ", total_correct)
            with col2:
                st.metric("–û–±—Ä–∞–∑—Ü–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ", total_analysis)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö
            st.subheader("üîë –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–Æ–ß–ê–• –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–ö–ª—é—á–∏ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞:**")
                for sample in correct_samples[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    st.write(f"`{sample['key']}` ‚Üí \"{sample['correct_name']}\"")
            
            with col2:
                st.write("**–ö–ª—é—á–∏ –∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:**")
                all_analysis_samples = []
                for steel_grade, samples in chemical_tables.items():
                    all_analysis_samples.extend(samples)
                for sample in all_analysis_samples[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    st.write(f"`{sample['key']}` ‚Üí \"{sample['original_name']}\"")
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
            st.subheader("üîÑ –ü–û–ü–´–¢–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
            
            all_matched_samples = []
            final_tables = {}
            
            for steel_grade, samples in chemical_tables.items():
                sorted_samples = match_and_sort_samples(samples, correct_samples)
                all_matched_samples.extend(sorted_samples)
                
                if sorted_samples:
                    num_measurements = len(sorted_samples[0]['measurements'])
                    columns = ['‚Ññ', '–û–±—Ä–∞–∑–µ—Ü'] + [f'–ò–∑–º–µ—Ä–µ–Ω–∏–µ {i+1}' for i in range(num_measurements)]
                    
                    data = []
                    for i, sample in enumerate(sorted_samples):
                        row = [i+1, sample['correct_name']] + sample['measurements']
                        data.append(row)
                    
                    final_tables[steel_grade] = pd.DataFrame(data, columns=columns)
            
            total_matched = len(all_matched_samples)
            matching_rate = (total_matched / total_analysis) * 100 if total_analysis > 0 else 0
            
            st.metric("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤", f"{total_matched} ({matching_rate:.1f}%)")
            
            if total_matched > 0:
                st.success(f"‚úÖ –£–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å {total_matched} –æ–±—Ä–∞–∑—Ü–æ–≤!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                st.subheader("üìã –¢–ê–ë–õ–ò–¶–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–• –û–ë–†–ê–ó–¶–û–í")
                matched_data = []
                for sample in all_matched_samples:
                    matched_data.append({
                        '‚Ññ –ø/–ø': sample['order'],
                        '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': sample['correct_name'],
                        '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': sample['original_name'],
                        '–ö–ª—é—á': sample['key']
                    })
                st.dataframe(pd.DataFrame(matched_data), use_container_width=True)
            
            # –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´
            if final_tables:
                st.subheader("üìã –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
                
                for steel_grade, table in final_tables.items():
                    with st.expander(f"üî© {steel_grade} ({len(table)} –æ–±—Ä–∞–∑—Ü–æ–≤)", expanded=True):
                        st.dataframe(table, use_container_width=True)
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        excel_buffer = io.BytesIO()
                        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                            table.to_excel(writer, index=False, sheet_name=steel_grade[:30])
                        excel_buffer.seek(0)
                        
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                            data=excel_buffer,
                            file_name=f"–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ_{steel_grade}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_{steel_grade}"
                        )
                
                # –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                if len(final_tables) > 1:
                    st.subheader("üíæ –ü–ê–ö–ï–¢–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï")
                    excel_buffer_all = io.BytesIO()
                    with pd.ExcelWriter(excel_buffer_all, engine='openpyxl') as writer:
                        for steel_grade, table in final_tables.items():
                            table.to_excel(writer, index=False, sheet_name=steel_grade[:30])
                    excel_buffer_all.seek(0)
                    
                    st.download_button(
                        label="üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (Excel)",
                        data=excel_buffer_all,
                        file_name="–≤—Å–µ_–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Ç–∞–±–ª–∏—Ü—ã.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key="download_all",
                        use_container_width=True
                    )
            else:
                st.warning("""
                ‚ö†Ô∏è **–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑—Ü—ã**
                
                **–ß—Ç–æ –¥–∞–ª—å—à–µ?**
                1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—ã—à–µ
                2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                3. –ú—ã —É–ª—É—á—à–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                
                **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ:**
                - –ö–∞–∫–∏–µ –æ–±—Ä–∞–∑—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã?
                - –ü–æ –∫–∞–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è (—Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã, –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)?
                """)
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            import traceback
            st.code(traceback.format_exc())

if __name__ == "__main__":
    main()
