import streamlit as st
import pandas as pd
import re
import io
import base64
from typing import List, Dict, Tuple

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• (—Ä–∞–Ω–µ–µ –≤ utils/processing.py)
# =============================================================================

def parse_correct_order(file_content: str) -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤—ã—Ä–µ–∑–∫–∞–º–∏
    """
    lines = file_content.split('\n')
    correct_samples = []
    
    for line in lines:
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ–±—Ä–∞–∑—Ü–æ–≤
        match = re.match(r'^\s*(\d+)\s+([^\d].*)$', line.strip())
        if match:
            sample_number = int(match.group(1))
            sample_name = match.group(2).strip()
            
            # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Ç–∏–ø–∞ [ ]{.mark}
            sample_name = re.sub(r'\[(.*?)\]\{\.mark\}', r'\1', sample_name)
            
            correct_samples.append({
                'order': sample_number,
                'correct_name': sample_name,
                'key': create_sample_key(sample_name)
            })
    
    return correct_samples

def create_sample_key(sample_name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    normalized = re.sub(r'\s+', ' ', sample_name.strip()).lower()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    patterns = [
        r'([–∞-—è]+)\s*([–∞-—è]+)?\s*\((\d+[-\d]*),\s*([–∞-—è])\)',  # –ö–ü–ü –í–î(50,–ê)
        r'([–∞-—è]+)\s*([–∞-—è]+)?\s*\((\d+)\)',  # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        r'(\d+)[,_]\s*([–∞-—è]+)',  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "28_–ö–ü–ü –í–î"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, normalized)
        if match:
            parts = [p for p in match.groups() if p]
            return '_'.join(parts)
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    numbers = re.findall(r'\d+', normalized)
    if numbers:
        return f"sample_{numbers[-1]}"
    
    return normalized

def parse_chemical_tables(file_content: str) -> Dict[str, List[Dict]]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏: [—Å–ø–∏—Å–æ–∫_–æ–±—Ä–∞–∑—Ü–æ–≤]}
    """
    lines = file_content.split('\n')
    tables = {}
    current_steel_grade = None
    current_table = []
    in_table = False
    header_found = False
    
    for line in lines:
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –º–∞—Ä–∫–∏ —Å—Ç–∞–ª–∏
        steel_match = re.search(r'–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏:\s*([^\n]+)', line)
        if steel_match:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if current_steel_grade and current_table:
                tables[current_steel_grade] = current_table
                current_table = []
            
            current_steel_grade = steel_match.group(1).strip()
            in_table = False
            header_found = False
            continue
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
        if re.match(r'^-+\s+-+', line) and current_steel_grade:
            if not in_table:
                in_table = True
            elif header_found:
                # –ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
                if current_table:
                    tables[current_steel_grade] = current_table
                    current_table = []
                in_table = False
                header_found = False
            continue
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑—Ü–æ–≤
        if in_table and current_steel_grade:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –¢–£
            if '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¢–£' in line or '14-3–†-55-2001' in line:
                continue
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—ã–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è)
            if re.match(r'^\s*\d+\s+[–∞-—è]', line.lower()):
                parts = re.split(r'\s{2,}', line.strip())
                if len(parts) >= 3:  # –ö–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                    sample_data = {
                        'original_name': parts[1],
                        'measurements': parts[2:],  # –í—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                        'key': create_sample_key(parts[1])
                    }
                    current_table.append(sample_data)
                    header_found = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞–±–ª–∏—Ü—É
    if current_steel_grade and current_table:
        tables[current_steel_grade] = current_table
    
    return tables

def match_and_sort_samples(original_samples: List[Dict], correct_samples: List[Dict]) -> List[Dict]:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    """
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫
    key_to_correct = {}
    for correct in correct_samples:
        key_to_correct[correct['key']] = {
            'correct_name': correct['correct_name'],
            'order': correct['order']
        }
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑—Ü—ã
    matched_samples = []
    
    for original in original_samples:
        if original['key'] in key_to_correct:
            matched_samples.append({
                'correct_name': key_to_correct[original['key']]['correct_name'],
                'measurements': original['measurements'],
                'order': key_to_correct[original['key']]['order'],
                'original_name': original['original_name'],
                'key': original['key']
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    matched_samples.sort(key=lambda x: x['order'])
    
    return matched_samples

def create_final_tables(sorted_samples_dict: Dict[str, List[Dict]]) -> Dict[str, pd.DataFrame]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—Ä–∫–∏ —Å—Ç–∞–ª–∏
    """
    final_tables = {}
    
    for steel_grade, samples in sorted_samples_dict.items():
        if not samples:
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        num_measurements = len(samples[0]['measurements'])
        columns = ['‚Ññ', '–û–±—Ä–∞–∑–µ—Ü'] + [f'–ò–∑–º–µ—Ä–µ–Ω–∏–µ {i+1}' for i in range(num_measurements)]
        
        data = []
        for i, sample in enumerate(samples):
            row = [i+1, sample['correct_name']] + sample['measurements']
            data.append(row)
        
        final_tables[steel_grade] = pd.DataFrame(data, columns=columns)
    
    return final_tables

def process_multiple_files(correct_order_content: str, chemical_analysis_content: str) -> Dict[str, pd.DataFrame]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    """
    # –ü–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    correct_samples = parse_correct_order(correct_order_content)
    
    # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    chemical_tables = parse_chemical_tables(chemical_analysis_content)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ
    sorted_samples_dict = {}
    
    for steel_grade, samples in chemical_tables.items():
        sorted_samples = match_and_sort_samples(samples, correct_samples)
        sorted_samples_dict[steel_grade] = sorted_samples
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    final_tables = create_final_tables(sorted_samples_dict)
    
    return final_tables, correct_samples, chemical_tables

def get_matching_stats(correct_samples: List[Dict], chemical_tables: Dict[str, List[Dict]], final_tables: Dict[str, pd.DataFrame]) -> Dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –æ–±—Ä–∞–∑—Ü–æ–≤
    """
    total_correct = len(correct_samples)
    
    total_chemical = 0
    for samples in chemical_tables.values():
        total_chemical += len(samples)
    
    total_matched = 0
    for table in final_tables.values():
        total_matched += len(table)
    
    return {
        'total_correct_samples': total_correct,
        'total_chemical_samples': total_chemical,
        'total_matched_samples': total_matched,
        'matching_rate': round((total_matched / total_chemical) * 100, 2) if total_chemical > 0 else 0
    }

# =============================================================================
# STREAMLIT –ò–ù–¢–ï–†–§–ï–ô–° (—Ä–∞–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–π app.py)
# =============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
    page_icon="üî¨",
    layout="wide"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stats-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .success-text {
        color: #28a745;
        font-weight: bold;
    }
    .warning-text {
        color: #ffc107;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.markdown('<div class="main-header">üî¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</div>', unsafe_allow_html=True)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with st.expander("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤ (—Ñ–æ—Ä–º–∞—Ç DOCX –∏–ª–∏ TXT)
        2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ñ–æ—Ä–º–∞—Ç DOCX –∏–ª–∏ TXT)  
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–∫–∞—á–∞–π—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã

        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)
        - –î–æ–∫—É–º–µ–Ω—Ç—ã Word (.docx)
        - –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏

        **–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:**
        - "–ö–ü–ü –í–î 2, —Ç—Ä—É–±–∞ 28" ‚Üí "–ö–ü–ü –í–î(28,–ì)"
        - "–ù–ì 28_–ö–ü–ü –í–î" ‚Üí "–ö–ü–ü –í–î(28,–ì)" 
        - "–ö–ü–ü –í–î 2, —Ç—Ä—É–±–∞ 122" ‚Üí "–ö–ü–ü –í–î(50,–ê)"
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –§–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º")
        correct_order_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤",
            type=['txt', 'docx'],
            key="correct_order"
        )
        
        if correct_order_file:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {correct_order_file.name}")
            
            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ø–æ—Ä—è–¥–∫–æ–º"):
                try:
                    content = correct_order_file.getvalue().decode("utf-8")
                    st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", content, height=200)
                except:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π DOCX.")

    with col2:
        st.subheader("üß™ –§–∞–π–ª —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
        chemical_analysis_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            type=['txt', 'docx'],
            key="chemical_analysis"
        )
        
        if chemical_analysis_file:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {chemical_analysis_file.name}")
            
            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º"):
                try:
                    content = chemical_analysis_file.getvalue().decode("utf-8")
                    st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", content, height=200)
                except:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π DOCX.")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        if not correct_order_file or not chemical_analysis_file:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞")
            return
        
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            correct_order_content = correct_order_file.getvalue().decode("utf-8")
            chemical_analysis_content = chemical_analysis_file.getvalue().decode("utf-8")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            with st.spinner("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ..."):
                final_tables, correct_samples, chemical_tables = process_multiple_files(
                    correct_order_content, 
                    chemical_analysis_content
                )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = get_matching_stats(correct_samples, chemical_tables, final_tables)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f'<div class="stats-card">–û–±—Ä–∞–∑—Ü–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: <span class="success-text">{stats["total_correct_samples"]}</span></div>', unsafe_allow_html=True)
            with col2:
                st.markdown(f'<div class="stats-card">–û–±—Ä–∞–∑—Ü–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ: <span class="success-text">{stats["total_chemical_samples"]}</span></div>', unsafe_allow_html=True)
            with col3:
                st.markdown(f'<div class="stats-card">–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: <span class="success-text">{stats["total_matched_samples"]}</span></div>', unsafe_allow_html=True)
            with col4:
                color_class = "success-text" if stats["matching_rate"] > 80 else "warning-text"
                st.markdown(f'<div class="stats-card">–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: <span class="{color_class}">{stats["matching_rate"]}%</span></div>', unsafe_allow_html=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
            
            if not final_tables:
                st.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö.")
            else:
                for steel_grade, table in final_tables.items():
                    with st.expander(f"–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏: {steel_grade} ({len(table)} –æ–±—Ä–∞–∑—Ü–æ–≤)"):
                        st.dataframe(table, use_container_width=True)
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
                        excel_buffer = io.BytesIO()
                        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                            table.to_excel(writer, sheet_name=steel_grade[:30], index=False)
                        
                        excel_buffer.seek(0)
                        b64 = base64.b64encode(excel_buffer.read()).decode()
                        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_{steel_grade}.xlsx">üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É Excel</a>'
                        st.markdown(href, unsafe_allow_html=True)
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º
                st.subheader("üíæ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
                excel_buffer_all = io.BytesIO()
                with pd.ExcelWriter(excel_buffer_all, engine='openpyxl') as writer:
                    for steel_grade, table in final_tables.items():
                        table.to_excel(writer, sheet_name=steel_grade[:30], index=False)
                
                excel_buffer_all.seek(0)
                b64_all = base64.b64encode(excel_buffer_all.read()).decode()
                href_all = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_all}" download="–≤—Å–µ_–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Ç–∞–±–ª–∏—Ü—ã.xlsx">üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (Excel)</a>'
                st.markdown(href_all, unsafe_allow_html=True)
        
        except Exception as e:
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
            st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    st.markdown("---")
    st.markdown("""
    ### ‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ
    –≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
    —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –æ–±—Ä–∞–∑—Ü–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π
    - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
    
    **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Streamlit, Pandas, Python
    """)

if __name__ == "__main__":
    main()