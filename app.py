import streamlit as st
import pandas as pd
import re
import io
from typing import List, Dict, Tuple
import docx

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–û–í
# =============================================================================

def read_uploaded_file(file):
    """
    –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    """
    try:
        # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file.seek(0)
        
        if file.name.endswith('.docx'):
            # –ß–∏—Ç–∞–µ–º DOCX —Ñ–∞–π–ª
            doc = docx.Document(file)
            full_text = []
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    full_text.append(paragraph.text)
            
            # –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            for table in doc.tables:
                for row in table.rows:
                    row_text = []
                    for cell in row.cells:
                        if cell.text.strip():
                            row_text.append(cell.text)
                    if row_text:
                        full_text.append(" | ".join(row_text))
            
            content = "\n".join(full_text)
            return content
        else:
            # –ß–∏—Ç–∞–µ–º TXT —Ñ–∞–π–ª
            return file.getvalue().decode("utf-8")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.name}: {str(e)}")
        return None

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•
# =============================================================================

def parse_correct_order(file_content: str) -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤—ã—Ä–µ–∑–∫–∞–º–∏
    """
    if not file_content:
        return []
        
    lines = file_content.split('\n')
    correct_samples = []
    
    for line in lines:
        line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if re.match(r'^[-]+$', line) or not line:
            continue
            
        # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Ç–∏–ø–∞ [ ]{.mark} - —Å–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å—é —Ä–∞–∑–º–µ—Ç–∫—É
        clean_line = re.sub(r'\[(.*?)\]\{\.mark\}', r'\1', line)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ–±—Ä–∞–∑—Ü–æ–≤
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞: "13       [–ö–ü–ü –í–î(50,–ê)]{.mark}"
        match = re.match(r'^\s*(\d+)\s+(.+)$', clean_line)
        if match:
            sample_number = int(match.group(1))
            sample_name = match.group(2).strip()
            
            correct_samples.append({
                'order': sample_number,
                'correct_name': sample_name,
                'key': create_sample_key(sample_name)
            })
    
    return correct_samples

def create_sample_key(sample_name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    normalized = re.sub(r'\s+', ' ', sample_name.strip()).lower()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    patterns = [
        r'([–∞-—è]+)\s*([–∞-—è]+)?\s*\((\d+[-\d]*),\s*([–∞-—è])\)',  # –ö–ü–ü –í–î(50,–ê)
        r'([–∞-—è]+)\s*([–∞-—è]+)?-?(\d+)?\s*\((\d+),\s*([–∞-—è])\)', # –ö–ü–ü –ù–î-1(19,–ê)
        r'(\d+)[,_]\s*([–∞-—è]+)',  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "28_–ö–ü–ü –í–î"
    ]
    
    for pattern in patterns:
        match = re.search(pattern, normalized)
        if match:
            parts = [p for p in match.groups() if p]
            return '_'.join(parts)
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    numbers = re.findall(r'\d+', normalized)
    if numbers:
        return f"sample_{numbers[-1]}"
    
    return normalized

def parse_chemical_tables(file_content: str) -> Dict[str, List[Dict]]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏: [—Å–ø–∏—Å–æ–∫_–æ–±—Ä–∞–∑—Ü–æ–≤]}
    """
    if not file_content:
        return {}
        
    lines = file_content.split('\n')
    tables = {}
    current_steel_grade = None
    current_table = []
    in_table = False
    
    for i, line in enumerate(lines):
        line = line.strip()
        
        # –ò—â–µ–º –º–∞—Ä–∫—É —Å—Ç–∞–ª–∏
        steel_match = re.search(r'–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏:\s*([^\n]+)', line)
        if steel_match:
            if current_steel_grade and current_table:
                tables[current_steel_grade] = current_table
                current_table = []
            current_steel_grade = steel_match.group(1).strip()
            in_table = False
            continue
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ñ–∏—Å–æ–≤)
        if re.match(r'^[-\\s]{10,}', line) and current_steel_grade:
            if not in_table:
                in_table = True
            continue
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏
        if in_table and current_steel_grade:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –¢–£
            if '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¢–£' in line or '14-3–†-55-2001' in line:
                continue
                
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            if re.match(r'^\s*\d+\s+[–∞-—è–ê-–Ø]', line):
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–±–µ–ª–∞–º
                parts = re.split(r'\s{2,}', line.strip())
                if len(parts) >= 3:
                    sample_data = {
                        'original_name': parts[1],
                        'measurements': parts[2:],
                        'key': create_sample_key(parts[1])
                    }
                    current_table.append(sample_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞–±–ª–∏—Ü—É
    if current_steel_grade and current_table:
        tables[current_steel_grade] = current_table
    
    return tables

def match_and_sort_samples(original_samples: List[Dict], correct_samples: List[Dict]) -> Tuple[List[Dict], List[Dict], List[Dict]]:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ, –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ_–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ_–∞–Ω–∞–ª–∏–∑)
    """
    key_to_correct = {}
    for correct in correct_samples:
        key_to_correct[correct['key']] = {
            'correct_name': correct['correct_name'],
            'order': correct['order']
        }
    
    matched_samples = []
    used_keys = set()
    
    for original in original_samples:
        if original['key'] in key_to_correct:
            matched_samples.append({
                'correct_name': key_to_correct[original['key']]['correct_name'],
                'measurements': original['measurements'],
                'order': key_to_correct[original['key']]['order'],
                'original_name': original['original_name'],
                'key': original['key']
            })
            used_keys.add(original['key'])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    matched_samples.sort(key=lambda x: x['order'])
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    unmatched_correct = [correct for correct in correct_samples if correct['key'] not in used_keys]
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    unmatched_analysis = [original for original in original_samples if original['key'] not in key_to_correct]
    
    return matched_samples, unmatched_correct, unmatched_analysis

def create_matching_table(matched_samples: List[Dict]) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    """
    data = []
    for sample in matched_samples:
        data.append({
            '‚Ññ –ø/–ø': sample['order'],
            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': sample['correct_name'],
            '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞': sample['original_name'],
            '–ö–ª—é—á —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è': sample['key']
        })
    
    return pd.DataFrame(data)

# =============================================================================
# STREAMLIT –ò–ù–¢–ï–†–§–ï–ô–°
# =============================================================================

st.set_page_config(
    page_title="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
    page_icon="üî¨",
    layout="wide"
)

st.markdown("""
<style>
    .main-header { 
        font-size: 2.5rem; 
        color: #1f77b4; 
        text-align: center; 
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .stats-card { 
        background-color: #f0f2f6; 
        padding: 1rem; 
        border-radius: 0.5rem; 
        margin: 0.5rem 0;
        text-align: center;
    }
    .success-text { 
        color: #28a745; 
        font-weight: bold; 
        font-size: 1.2rem;
    }
    .warning-text { 
        color: #ffc107; 
        font-weight: bold;
        font-size: 1.2rem;
    }
    .file-info {
        background-color: #e8f4fd;
        padding: 0.5rem;
        border-radius: 0.3rem;
        margin: 0.3rem 0;
    }
    .debug-info {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        font-family: monospace;
        font-size: 0.9rem;
    }
</style>
""", unsafe_allow_html=True)

def main():
    st.markdown('<div class="main-header">üî¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</div>', unsafe_allow_html=True)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with st.expander("üìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ", expanded=False):
        st.markdown("""
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤** (TXT –∏–ª–∏ DOCX —Ñ–æ—Ä–º–∞—Ç)
        2. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞** (TXT –∏–ª–∏ DOCX —Ñ–æ—Ä–º–∞—Ç)  
        3. **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"**
        4. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è** - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–ª–∞ –æ–±—Ä–∞–∑—Ü—ã
        5. **–°–∫–∞—á–∞–π—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã**

        ### –ü—Ä–∏–Ω—Ü–∏–ø —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ **—Ü–∏—Ñ—Ä–∞–º –∏ –±—É–∫–≤–∞–º** –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –æ–±—Ä–∞–∑—Ü–æ–≤:
        - "–ö–ü–ü –í–î 2, —Ç—Ä—É–±–∞ 28" ‚Üí "–ö–ü–ü –í–î(28,–ì)" (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª—É 28)
        - "–ù–ì 28_–ö–ü–ü –í–î" ‚Üí "–ö–ü–ü –í–î(28,–ì)" (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª—É 28)
        - "–ö–ü–ü –í–î 2, —Ç—Ä—É–±–∞ 122" ‚Üí "–ö–ü–ü –í–î(50,–ê)" (—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª—É 50)
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –§–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º")
        correct_order_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤",
            type=['txt', 'docx'],
            key="correct_order",
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏"
        )
        
        if correct_order_file:
            st.markdown(f'<div class="file-info">‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: <b>{correct_order_file.name}</b> ({correct_order_file.type})</div>', unsafe_allow_html=True)
    
    with col2:
        st.subheader("üß™ –§–∞–π–ª —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
        chemical_analysis_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", 
            type=['txt', 'docx'],
            key="chemical_analysis",
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –º–∞—Ä–∫–∞–º —Å—Ç–∞–ª–∏"
        )
        
        if chemical_analysis_file:
            st.markdown(f'<div class="file-info">‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: <b>{chemical_analysis_file.name}</b> ({chemical_analysis_file.type})</div>', unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.button("üöÄ –û–ë–†–ê–ë–û–¢–ê–¢–¨ –î–ê–ù–ù–´–ï", type="primary", use_container_width=True):
        if not correct_order_file or not chemical_analysis_file:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
            return
        
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            with st.spinner("üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª—ã..."):
                correct_order_content = read_uploaded_file(correct_order_file)
                chemical_analysis_content = read_uploaded_file(chemical_analysis_file)
            
            if not correct_order_content:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º")
                return
                
            if not chemical_analysis_content:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):
                correct_samples = parse_correct_order(correct_order_content)
                chemical_tables = parse_chemical_tables(chemical_analysis_content)
            
            if not correct_samples:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–∑—Ü—ã –≤ —Ñ–∞–π–ª–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º")
                return
                
            if not chemical_tables:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            with st.spinner("üîÑ –°–æ–ø–æ—Å—Ç–∞–≤–ª—è—é –æ–±—Ä–∞–∑—Ü—ã..."):
                all_matched_samples = []
                all_unmatched_correct = []
                all_unmatched_analysis = []
                
                for steel_grade, samples in chemical_tables.items():
                    matched_samples, unmatched_correct, unmatched_analysis = match_and_sort_samples(samples, correct_samples)
                    all_matched_samples.extend(matched_samples)
                    all_unmatched_correct.extend(unmatched_correct)
                    all_unmatched_analysis.extend(unmatched_analysis)
            
            # –°–û–ó–î–ê–ï–ú –¢–ê–ë–õ–ò–¶–£ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø
            st.subheader("üîç –¢–ê–ë–õ–ò–¶–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô")
            
            if all_matched_samples:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                matching_df = create_matching_table(all_matched_samples)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(matching_df, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                total_correct = len(correct_samples)
                total_matched = len(all_matched_samples)
                total_unmatched_correct = len(all_unmatched_correct)
                total_unmatched_analysis = len(all_unmatched_analysis)
                matching_rate = (total_matched / total_correct) * 100 if total_correct > 0 else 0
                
                st.success(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {total_matched} –∏–∑ {total_correct} –æ–±—Ä–∞–∑—Ü–æ–≤ ({matching_rate:.1f}%)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã
                if all_unmatched_correct:
                    st.warning(f"‚ö†Ô∏è –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {total_unmatched_correct} –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞:")
                    unmatched_data = []
                    for sample in all_unmatched_correct:
                        unmatched_data.append({
                            '‚Ññ –ø/–ø': sample['order'],
                            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': sample['correct_name'],
                            '–ö–ª—é—á': sample['key']
                        })
                    st.dataframe(pd.DataFrame(unmatched_data), use_container_width=True)
                
                if all_unmatched_analysis:
                    st.warning(f"‚ö†Ô∏è –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {total_unmatched_analysis} –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞:")
                    unmatched_analysis_data = []
                    for sample in all_unmatched_analysis:
                        unmatched_analysis_data.append({
                            '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞': sample['original_name'],
                            '–ö–ª—é—á': sample['key']
                        })
                    st.dataframe(pd.DataFrame(unmatched_analysis_data), use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                if st.button("üìä –ü–û–ö–ê–ó–ê–¢–¨ –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´", type="secondary"):
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                    final_tables = {}
                    for steel_grade, samples in chemical_tables.items():
                        matched_samples, _, _ = match_and_sort_samples(samples, correct_samples)
                        if matched_samples:
                            num_measurements = len(matched_samples[0]['measurements'])
                            columns = ['‚Ññ', '–û–±—Ä–∞–∑–µ—Ü'] + [f'–ò–∑–º–µ—Ä–µ–Ω–∏–µ {i+1}' for i in range(num_measurements)]
                            
                            data = []
                            for i, sample in enumerate(matched_samples):
                                row = [i+1, sample['correct_name']] + sample['measurements']
                                data.append(row)
                            
                            final_tables[steel_grade] = pd.DataFrame(data, columns=columns)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                    st.subheader("üìã –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
                    
                    for steel_grade, table in final_tables.items():
                        with st.expander(f"üî© –ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏: {steel_grade} ({len(table)} –æ–±—Ä–∞–∑—Ü–æ–≤)", expanded=True):
                            st.dataframe(table, use_container_width=True)
                            
                            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                            excel_buffer = io.BytesIO()
                            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                                table.to_excel(writer, index=False, sheet_name=steel_grade[:30])
                            excel_buffer.seek(0)
                            
                            st.download_button(
                                label=f"üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É {steel_grade} (Excel)",
                                data=excel_buffer,
                                file_name=f"–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ_{steel_grade}.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                key=f"download_{steel_grade}"
                            )
                    
                    # –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                    if len(final_tables) > 1:
                        st.subheader("üíæ –ü–ê–ö–ï–¢–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï")
                        excel_buffer_all = io.BytesIO()
                        with pd.ExcelWriter(excel_buffer_all, engine='openpyxl') as writer:
                            for steel_grade, table in final_tables.items():
                                table.to_excel(writer, index=False, sheet_name=steel_grade[:30])
                        excel_buffer_all.seek(0)
                        
                        st.download_button(
                            label="üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (Excel)",
                            data=excel_buffer_all,
                            file_name="–≤—Å–µ_–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Ç–∞–±–ª–∏—Ü—ã.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key="download_all",
                            use_container_width=True
                        )
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                st.markdown("### üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–ö–ª—é—á–∏ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞:**")
                    for sample in correct_samples[:10]:
                        st.write(f"- {sample['key']} ‚Üí '{sample['correct_name']}'")
                
                with col2:
                    st.write("**–ö–ª—é—á–∏ –∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:**")
                    all_analysis_samples = []
                    for samples in chemical_tables.values():
                        all_analysis_samples.extend(samples)
                    for sample in all_analysis_samples[:10]:
                        st.write(f"- {sample['key']} ‚Üí '{sample['original_name']}'")
                
        except Exception as e:
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
            st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    st.markdown("---")
    st.markdown("""
    ### ‚ÑπÔ∏è –û –ü–†–û–ï–ö–¢–ï
    
    –≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
    —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –æ–±—Ä–∞–∑—Ü–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ.
    
    **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ TXT –∏ DOCX
    - üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –ø–æ —Ü–∏—Ñ—Ä–∞–º –∏ –±—É–∫–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
    - üëÅÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    - üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
    - üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
    
    **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Python, Streamlit, Pandas, OpenPyXL, python-docx
    """)

if __name__ == "__main__":
    main()
